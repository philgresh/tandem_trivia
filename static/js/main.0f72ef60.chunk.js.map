{"version":3,"sources":["components/atoms/Button.jsx","components/atoms/MenuButton.jsx","components/atoms/NavbarTitle.jsx","components/atoms/SideNavbar.jsx","components/atoms/Question.jsx","components/atoms/CorrectOrIncorrectIcon.jsx","components/atoms/AnswerOption.jsx","components/atoms/GuessButton.jsx","components/atoms/AnswerFeedback.jsx","components/atoms/ResponseAnswer.jsx","components/atoms/ResponseQuestion.jsx","components/atoms/Scoreboard.jsx","utils/logic.js","utils/api.js","components/logic/useRound.js","components/logic/useToggle.js","components/logic/useQuestion.js","components/logic/RoundContext.js","components/organisms/Navbar.jsx","components/organisms/Main.jsx","components/organisms/Footer.jsx","components/organisms/PageContainer.jsx","components/organisms/AnswerOptions.jsx","components/organisms/QuestionCard.jsx","components/organisms/ResultsBreakdown.jsx","components/pages/Home.jsx","components/pages/Play.jsx","components/pages/Results.jsx","components/pages/App.js","reportWebVitals.js","index.js"],"names":["StyledButton","styled","button","styleProps","color","backgroundColor","padding","Button","props","dataTestId","rest","data-testid","className","defaultProps","MenuButton","icon","faBars","NavbarTitle","to","sidebarLinks","title","Links","toggle","map","activeClassName","onClick","SideNavbar","open","role","Question","question","CorrectOrIncorrectIcon","isCorrect","faCheck","faTimes","AnswerOption","answer","selected","submitted","onChange","classes","clsx","type","disabled","GuessButton","lastQuestion","text","getButtonAttrs","correctResponses","Object","freeze","incorrectResponses","sample","array","Math","floor","random","length","AnswerFeedback","ResponseAnswer","guess","correct","ResponseQuestion","Scoreboard","score","incorrect","shuffle","arrLength","newArr","slice","i","j","temp","addCorrectToAnswers","answers","fetchQuestions","a","num","questionsWithId","devQuestions","q","id","shuffledQuestions","questionsWithAnswersAdded","Promise","resolve","CORRECT","INCORRECT","initialScore","history","scoreReducer","state","action","newState","newHistoryObj","questionId","useRound","initialQuestions","useReducer","dispatch","useState","questions","setQuestions","currQuestion","setCurrQuestion","nextQuestion","nextIdx","nextQuestionObj","startNewRound","then","newQuestions","newFirstQuestion","makeGuess","thisQuestionIdx","findIndex","reject","Error","thisQuestion","useToggle","initialValue","value","setValue","useCallback","v","useQuestion","onSubmit","useHistory","setSelected","setSubmitted","setLastQuestion","push","nextQuestionResponse","RoundContext","createContext","RoundContextProvider","children","round","Provider","Navbar","Main","linksList","faCodeBranch","faGithub","faHome","faLinkedin","href","Footer","PageContainer","navBar","AnswerOptions","isSelected","QuestionCard","ResultsBreakdown","historyObj","find","Home","Play","useContext","useEffect","Results","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0f72ef60.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst StyledButton = styled.button`\n  color: ${({ styleProps }) => styleProps.color};\n  background-color: ${({ styleProps }) => styleProps.backgroundColor};\n  padding: ${({ styleProps }) => styleProps.padding};\n`;\n\nconst Button = (props) => {\n  const { styleProps, dataTestId, ...rest } = props;\n  return (\n    <StyledButton\n      styleProps={styleProps}\n      data-testid={dataTestId}\n      className={dataTestId}\n      {...rest}\n    />\n  );\n};\n\nButton.propTypes = {\n  styleProps: PropTypes.shape({\n    color: PropTypes.string,\n    backgroundColor: PropTypes.string,\n    padding: PropTypes.string,\n  }),\n  dataTestId: PropTypes.string,\n};\n\nButton.defaultProps = {\n  styleProps: {\n    color: 'inherit',\n    backgroundColor: 'transparent',\n    padding: '0.5rem',\n  },\n  dataTestId: 'button',\n};\n\nexport default Button;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBars } from '@fortawesome/free-solid-svg-icons';\nimport Button from './Button';\n\nconst MenuButton = ({ color, ...rest }) => (\n  <Button {...rest} className=\"menu-button\" dataTestId=\"menu-button\">\n    <FontAwesomeIcon icon={faBars} color={color} />\n  </Button>\n);\n\nMenuButton.propTypes = {\n  color: PropTypes.string,\n};\n\nMenuButton.defaultProps = {\n  color: 'inherit',\n};\n\nexport default MenuButton;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst NavbarTitle = () => {\n  return (\n    <Link to=\"/\">\n      <h1 data-testid=\"navbar-title\">Practice Tandem Trivia!</h1>\n    </Link>\n  );\n};\n\nNavbarTitle.propTypes = {};\n\nexport default NavbarTitle;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { NavLink } from 'react-router-dom';\n\nconst sidebarLinks = [\n  {\n    to: '/play',\n    title: 'New Round',\n  },\n];\n\nconst Links = ({ toggle }) =>\n  sidebarLinks.map(({ to, title }) => (\n    <NavLink key={to} to={to} activeClassName=\"selected\" onClick={toggle}>\n      {title}\n    </NavLink>\n  ));\n\nLinks.propTypes = {\n  toggle: PropTypes.func.isRequired,\n};\n\nconst SideNavbar = ({ open, toggle }) => {\n  return (\n    <>\n      <div className={`sidenav ${open ? '' : 'hidden'}`} data-testid=\"sidenav\">\n        <Links toggle={toggle} />\n      </div>\n      <div\n        className={`sidenav-background ${open ? '' : 'hidden'}`}\n        onClick={toggle}\n        role=\"presentation\"\n        data-testid=\"sidenav-background\"\n      />\n    </>\n  );\n};\n\nSideNavbar.propTypes = {\n  open: PropTypes.bool.isRequired,\n  toggle: PropTypes.func.isRequired,\n};\n\nexport default SideNavbar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Question = ({ question }) => {\n  return (\n    <h2 className=\"question\" data-testid=\"question\">\n      {question}\n    </h2>\n  );\n};\n\nQuestion.propTypes = {\n  question: PropTypes.string.isRequired,\n};\n\nexport default Question;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheck, faTimes } from '@fortawesome/free-solid-svg-icons';\n\nconst CorrectOrIncorrectIcon = ({ isCorrect }) => {\n  if (isCorrect)\n    return (\n      <FontAwesomeIcon icon={faCheck} color=\"inherit\" className=\"correct\" />\n    );\n  return (\n    <FontAwesomeIcon icon={faTimes} color=\"inherit\" className=\"incorrect\" />\n  );\n};\n\nCorrectOrIncorrectIcon.propTypes = {\n  isCorrect: PropTypes.bool.isRequired,\n};\n\nexport default CorrectOrIncorrectIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport CorrectOrIncorrectIcon from './CorrectOrIncorrectIcon';\n\nconst AnswerOption = ({ answer, selected, isCorrect, submitted, onChange }) => {\n  const classes = clsx(\n    'answer-option',\n    submitted && isCorrect && 'correct',\n    submitted && !isCorrect && 'incorrect',\n    selected && 'selected',\n  );\n  return (\n    <button\n      type=\"button\"\n      className={classes}\n      data-testid=\"answer-option\"\n      onClick={onChange}\n      disabled={submitted}\n    >\n      {submitted && selected && (\n        <CorrectOrIncorrectIcon selected={selected} isCorrect={isCorrect} />\n      )}\n      {answer}\n    </button>\n  );\n};\n\nAnswerOption.propTypes = {\n  answer: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  isCorrect: PropTypes.bool.isRequired,\n  submitted: PropTypes.bool,\n  selected: PropTypes.bool,\n};\n\nAnswerOption.defaultProps = {\n  submitted: false,\n  selected: false,\n};\n\nexport default AnswerOption;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Button from './Button';\n\nexport const TEXT_INITIAL = 'Choose the correct answer!';\nexport const TEXT_READY_TO_SUBMIT = 'Submit!';\nexport const TEXT_SUBMITTED = 'Next question!';\nexport const TEXT_AFTER_LAST_QUESTION = 'See results!';\n\n// |           Scenario           | selected | submitted || disabled |            text            |\n// |:----------------------------:|:--------:|:---------:||:--------:|:--------------------------:|\n// | Initial                      |   false  |   false   ||   true   | Choose the correct answer! |\n// | Ready to submit              |   true   |   false   ||   false  |           Submit!          |\n// | Submitted, received feedback |   true   |    true   ||   false  |       Next question!       |\n// | After last question          |   true   |    true   ||   false  |        See results!\n// |   (lastQuestion = true)      |          |           ||          |\n\nexport const getButtonAttrs = ({ selected, submitted, lastQuestion }) => {\n  let disabled = true;\n  let text = TEXT_INITIAL;\n  if (!selected) return { disabled, text };\n\n  disabled = false;\n  if (submitted) {\n    if (lastQuestion) {\n      text = TEXT_AFTER_LAST_QUESTION;\n    } else text = TEXT_SUBMITTED;\n  } else text = TEXT_READY_TO_SUBMIT;\n\n  return { disabled, text };\n};\n\nconst GuessButton = ({ selected, submitted, lastQuestion, onClick }) => {\n  const classes = clsx(\n    'guess-button',\n    submitted && 'submitted',\n    lastQuestion && 'last-question',\n  );\n  const { text, disabled } = getButtonAttrs({\n    selected,\n    submitted,\n    lastQuestion,\n  });\n  return (\n    <Button\n      dataTestId=\"guess-button\"\n      className={classes}\n      onClick={onClick}\n      disabled={disabled}\n    >\n      {text}\n    </Button>\n  );\n};\n\nGuessButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  submitted: PropTypes.bool,\n  lastQuestion: PropTypes.bool,\n  selected: PropTypes.bool,\n};\n\nGuessButton.defaultProps = {\n  submitted: false,\n  lastQuestion: false,\n  selected: false,\n};\n\nexport default GuessButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\n\nexport const correctResponses = Object.freeze([\n  'Congratulations!',\n  'Well done!',\n  \"That's correct!\",\n  'Way to go!',\n  \"You're on fire!\",\n]);\n\nexport const incorrectResponses = Object.freeze([\n  \"You'll get 'em next time!\",\n  'Keep working at it!',\n  'This is how we learn!',\n  \"The next one's yours for sure!\",\n  \"Don't worry about it!\",\n]);\n\nconst sample = (array) => {\n  const randNum = Math.floor(Math.random() * array.length);\n  return array[randNum];\n};\n\nconst AnswerFeedback = ({ isCorrect, submitted }) => {\n  const classes = clsx(\n    'answer-feedback',\n    submitted && isCorrect && 'correct',\n    submitted && !isCorrect && 'incorrect',\n  );\n\n  let text = '';\n  if (submitted) {\n    if (isCorrect) {\n      text = sample(correctResponses);\n    } else text = sample(incorrectResponses);\n  }\n\n  return (\n    <div className={classes} data-testid=\"answerfeedback\">\n      {text}\n    </div>\n  );\n};\n\nAnswerFeedback.propTypes = {\n  isCorrect: PropTypes.bool.isRequired,\n  submitted: PropTypes.bool.isRequired,\n};\n\nexport default AnswerFeedback;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ResponseAnswer = ({ guess, correct, isCorrect }) => {\n  const className = isCorrect ? 'correct' : 'incorrect';\n  return (\n    <div className={`response-guess ${className}`}>\n      <span>\n        You answered:&nbsp;<strong>{guess}</strong>\n      </span>\n      {!isCorrect && (\n        <>\n          <br />\n          <span>\n            The correct answer was: <strong>{correct}</strong>\n          </span>\n        </>\n      )}\n    </div>\n  );\n};\n\nResponseAnswer.propTypes = {\n  guess: PropTypes.string.isRequired,\n  correct: PropTypes.string.isRequired,\n  isCorrect: PropTypes.bool.isRequired,\n};\n\nexport default ResponseAnswer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ResponseQuestion = ({ question, isCorrect }) => {\n  const className = `response-question ${isCorrect ? 'correct' : 'incorrect'}`;\n  return <div className={className}>{question}</div>;\n};\n\nResponseQuestion.propTypes = {\n  question: PropTypes.string.isRequired,\n  isCorrect: PropTypes.bool.isRequired,\n};\n\nexport default ResponseQuestion;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Scoreboard = ({ score }) => {\n  const { correct, incorrect } = score;\n  return (\n    <div data-testid=\"scoreboard\" className=\"scoreboard\">\n      <div className=\"correct\">\n        <span className=\"score-header\">Correct</span>\n        <span className=\"score correct\">{correct}</span>\n      </div>\n      <div className=\"incorrect\">\n        <span className=\"score-header\">Incorrect</span>\n        <span className=\"score incorrect\">{incorrect}</span>\n      </div>\n    </div>\n  );\n};\n\nScoreboard.propTypes = {\n  score: PropTypes.shape({\n    correct: PropTypes.number,\n    incorrect: PropTypes.number,\n  }).isRequired,\n};\n\nexport default Scoreboard;\n","/* eslint-disable no-param-reassign */\n\n/**\n * Returns an array of shuffled elements\n * @param {Any} array Any array of elements\n * @returns {Array} A new shuffled array\n */\nexport const shuffle = (array) => {\n  const arrLength = array.length;\n  if (arrLength <= 1) return array;\n\n  const newArr = array.slice();\n  for (let i = arrLength - 1; i >= 1; i -= 1) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = newArr[i];\n    newArr[i] = newArr[j];\n    newArr[j] = temp;\n  }\n\n  return newArr;\n};\n\n/**\n *\n * @param {Object} question A question object\n * @param {String[]} question.incorrect An array of incorrect answers\n * @param {String} question.correct The correct answer\n * @returns {String[]} A shuffled array of answers\n * @example addCorrectToAnswers({incorrect: [\"M\", \"Z\", \"X\"], correct: \"Q\"})\n * // returns [\"Z\", \"Q\", \"M\", \"X\"]\n */\nexport const addCorrectToAnswers = ({ incorrect, correct }) => {\n  const answers = [...incorrect, correct];\n  return shuffle(answers);\n};\n\n// TODO : Didn't take into account preventing duplicates.\n/**\n * Returns an array of randomly-picked elements (or a single element if no\n * ```numElements``` parameter is included).\n * @param {Array} array - Array of any elements\n * @param {Number} numElements - Optional number of elements to return\n */\nexport const sample = (array, numElements = 1) => {\n  const returnArray = [];\n  while (returnArray.length < numElements) {\n    const randNum = Math.floor(Math.random() * array.length);\n    returnArray.push(array[randNum]);\n  }\n  if (numElements === 1) return returnArray[0];\n  return returnArray;\n};\n","import devQuestions from '../data/questions.json';\nimport { shuffle, addCorrectToAnswers } from './logic';\n\nconst isDev = process.env.NODE_ENV !== 'production';\n\n/**\n * Returns the question object of a given ID.\n * @param {Number} id The unique ID of a question.\n * @returns {Object} A question object\n */\nexport const fetchQuestion = (id) => {\n  const questions = devQuestions;\n  if (!isDev) {\n    // Call remote API, reassign questions\n  }\n  const thisQuestion = questions[id];\n\n  return { ...thisQuestion, id };\n};\n\n/**\n * Retrieves a number of random questions from the trivia database.\n * If in development/test mode, database is ```src/data/questions.json```.\n * @async\n * @param {Number} [num] Number of elements to retrieve (default 10)\n * @returns {Object[]} Array of length ```num``` questions with answers added.\n */\nexport const fetchQuestions = async (num = 10) => {\n  const questions = devQuestions;\n  if (!isDev) {\n    // Call remote API, reassign questions\n  }\n  const questionsWithId = questions.map((q, i) => ({ ...q, id: i }));\n  const shuffledQuestions = shuffle(questionsWithId).slice(0, num);\n  const questionsWithAnswersAdded = shuffledQuestions.map((q) => {\n    const answers = addCorrectToAnswers(q);\n    return { ...q, answers };\n  });\n  return new Promise((resolve) => resolve(questionsWithAnswersAdded));\n};\n","import { useState, useReducer } from 'react';\nimport { fetchQuestions } from '../../utils/api';\n\nexport const CORRECT = 'CORRECT';\nexport const INCORRECT = 'INCORRECT';\nexport const ROUND_OVER = 'ROUND_OVER';\n\nexport const initialScore = Object.freeze({\n  correct: 0,\n  incorrect: 0,\n  history: [],\n});\n\nexport const scoreReducer = (state, action) => {\n  Object.freeze(state);\n  const newState = { ...state };\n  if (!action) return initialScore;\n\n  const newHistoryObj = {\n    questionId: action.questionId,\n    guess: action.guess,\n    isCorrect: action.isCorrect,\n  };\n  newState.history = [...newState.history, newHistoryObj];\n\n  switch (action.type) {\n    case CORRECT: {\n      return {\n        ...newState,\n        correct: newState.correct + 1,\n      };\n    }\n    case INCORRECT: {\n      return {\n        ...newState,\n        incorrect: newState.incorrect + 1,\n      };\n    }\n    default:\n      return initialScore;\n  }\n};\n\n/**\n * Logic for running a trivia round.\n * @param {Object[]} initialQuestions - Optional loading of questions (testing).\n */\nconst useRound = (initialQuestions = []) => {\n  const [score, dispatch] = useReducer(scoreReducer, initialScore);\n  const [questions, setQuestions] = useState(initialQuestions);\n  const [currQuestion, setCurrQuestion] = useState(null);\n\n  /**\n   * Sets currQuestion to the next question object and returns\n   * lastQuestion boolean.\n   * @returns {Boolean} lastQuestion\n   */\n  const nextQuestion = () => {\n    const questionsAlreadyAsked = score.history.length;\n    const nextIdx = questionsAlreadyAsked;\n\n    const nextQuestionObj = questions[nextIdx];\n    setCurrQuestion(nextQuestionObj);\n\n    const lastQuestion = nextIdx === questions.length - 1;\n    return lastQuestion;\n  };\n\n  /**\n   * Fetches new questions and sets score to 0/0.\n   */\n  const startNewRound = () =>\n    fetchQuestions().then((newQuestions) => {\n      setQuestions(newQuestions);\n      dispatch();\n      const newFirstQuestion = newQuestions[0];\n      setCurrQuestion(newFirstQuestion);\n      return newFirstQuestion;\n    });\n\n  /**\n   * Check if a guess is correct and update the score.\n   * @typedef {Function} makeGuess\n   * @param {String} guess One of the answer options.\n   * @param {Number} questionId Unique ID of the questions.\n   * @returns {Object:{isCorrect:Boolean, correct:String, guess:String}}\n   * returnObj\n   */\n  const makeGuess = async (guess, questionId) => {\n    const thisQuestionIdx = questions.findIndex((q) => q.id === questionId);\n\n    if (thisQuestionIdx === -1) {\n      return Promise.reject(\n        Error(`'${questionId}' is not a valid question ID`),\n      );\n    }\n    const thisQuestion = questions[thisQuestionIdx];\n    const { correct } = thisQuestion;\n    const isCorrect = correct === guess;\n    const type = isCorrect ? CORRECT : INCORRECT;\n\n    dispatch({ type, isCorrect, guess, questionId });\n\n    return Promise.resolve({ isCorrect, correct, guess });\n  };\n\n  return {\n    score,\n    currQuestion,\n    questions,\n    makeGuess,\n    startNewRound,\n    nextQuestion,\n  };\n};\n\nexport default useRound;\n","import { useState, useCallback } from 'react';\n\nconst useToggle = (initialValue = false) => {\n  const [value, setValue] = useState(initialValue);\n  const toggle = useCallback(() => {\n    setValue((v) => !v);\n  }, []);\n\n  return [value, toggle];\n};\n\nexport default useToggle;\n","import { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nconst useQuestion = (onSubmit, nextQuestion) => {\n  const history = useHistory();\n  const [selected, setSelected] = useState('');\n  const [submitted, setSubmitted] = useState(false);\n  const [lastQuestion, setLastQuestion] = useState(false);\n\n  const onClick = () => {\n    if (submitted) {\n      if (lastQuestion) {\n        history.push('/results');\n      } else {\n        setSubmitted(false);\n        setSelected('');\n        const nextQuestionResponse = nextQuestion();\n        setLastQuestion(nextQuestionResponse);\n      }\n    } else {\n      onSubmit(selected);\n      setSubmitted(true);\n    }\n  };\n\n  return { selected, submitted, lastQuestion, setSelected, onClick };\n};\n\nexport default useQuestion;\n","import React, { createContext } from 'react';\nimport PropTypes from 'prop-types';\nimport useRound from './useRound';\n\nconst RoundContext = createContext();\n\nconst RoundContextProvider = ({ children }) => {\n  const round = useRound();\n  return (\n    <RoundContext.Provider value={{ ...round }}>\n      {children}\n    </RoundContext.Provider>\n  );\n};\n\nRoundContextProvider.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]).isRequired,\n};\n\nexport default RoundContextProvider;\nexport { RoundContext };\n","import React from 'react';\nimport { MenuButton, NavbarTitle, SideNavbar } from '../atoms';\nimport { useToggle } from '../logic';\n\nconst Navbar = () => {\n  const [open, toggle] = useToggle();\n\n  return (\n    <>\n      <nav>\n        <MenuButton onClick={toggle} />\n        <NavbarTitle />\n      </nav>\n      <SideNavbar open={open} toggle={toggle} />\n    </>\n  );\n};\n\nNavbar.propTypes = {};\n\nexport default Navbar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Main = ({ children }) => {\n  return <main>{children}</main>;\n};\n\nMain.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Main;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGithub, faLinkedin } from '@fortawesome/free-brands-svg-icons';\nimport { faCodeBranch, faHome } from '@fortawesome/free-solid-svg-icons';\n\nconst linksList = [\n  {\n    to: 'https://github.com/philgresh/tandem_apprenticeship',\n    icon: <FontAwesomeIcon icon={faCodeBranch} color=\"inherit\" />,\n  },\n  {\n    to: 'https://github.com/philgresh',\n    icon: <FontAwesomeIcon icon={faGithub} color=\"inherit\" />,\n  },\n  {\n    to: 'https://gresham.dev',\n    icon: <FontAwesomeIcon icon={faHome} color=\"inherit\" />,\n  },\n  {\n    to: 'https://www.linkedin.com/in/philgresham',\n    icon: <FontAwesomeIcon icon={faLinkedin} color=\"inherit\" />,\n  },\n];\n\nconst Links = () =>\n  linksList.map(({ to, icon }) => (\n    <a key={to} href={to}>\n      {icon}\n    </a>\n  ));\n\nconst Footer = () => {\n  return (\n    <footer>\n      <Links />\n    </footer>\n  );\n};\n\nFooter.propTypes = {};\n\nexport default Footer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst PageContainer = ({ children, navBar }) => {\n  return (\n    <div id=\"page-container\">\n      {navBar}\n      <div id=\"content-wrap\">\n        <div id=\"spacer\" />\n        {children}\n      </div>\n    </div>\n  );\n};\n\nPageContainer.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]).isRequired,\n  navBar: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]).isRequired,\n};\n\nexport default PageContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { AnswerOption } from '../atoms';\n\nconst AnswerOptions = ({\n  answers,\n  correct,\n  selected,\n  submitted,\n  setSelected,\n}) => {\n  return (\n    <div className=\"answer-options\">\n      {answers.map((answer) => {\n        const isSelected = selected === answer;\n        const isCorrect = correct === answer;\n        return (\n          <AnswerOption\n            key={answer}\n            answer={answer}\n            isCorrect={isCorrect}\n            onChange={() => setSelected(answer)}\n            selected={isSelected}\n            submitted={submitted}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nAnswerOptions.propTypes = {\n  answers: PropTypes.arrayOf(PropTypes.string).isRequired,\n  selected: PropTypes.string.isRequired,\n  submitted: PropTypes.bool.isRequired,\n  setSelected: PropTypes.func.isRequired,\n  correct: PropTypes.string.isRequired,\n};\n\nexport default AnswerOptions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Question, AnswerFeedback, GuessButton } from '../atoms';\nimport AnswerOptions from './AnswerOptions';\nimport { useQuestion } from '../logic';\n\nconst QuestionCard = ({ currQuestion, onSubmit, nextQuestion }) => {\n  const {\n    selected,\n    submitted,\n    lastQuestion,\n    setSelected,\n    onClick,\n  } = useQuestion(onSubmit, nextQuestion);\n  const { question, correct, answers } = currQuestion;\n\n  const isCorrect = selected === correct;\n\n  return (\n    <div className=\"question-card card\">\n      <Question question={question} />\n      <AnswerOptions\n        answers={answers}\n        submitted={submitted}\n        selected={selected}\n        setSelected={setSelected}\n        correct={correct}\n      />\n      <AnswerFeedback isCorrect={isCorrect} submitted={submitted} />\n      <GuessButton\n        onClick={onClick}\n        submitted={submitted}\n        lastQuestion={lastQuestion}\n        selected={selected !== ''}\n      />\n    </div>\n  );\n};\n\nQuestionCard.propTypes = {\n  currQuestion: PropTypes.shape({\n    id: PropTypes.number,\n    question: PropTypes.string,\n    correct: PropTypes.string,\n    answers: PropTypes.arrayOf(PropTypes.string),\n  }).isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  nextQuestion: PropTypes.func.isRequired,\n};\n\nexport default QuestionCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ResponseQuestion,\n  ResponseAnswer,\n  CorrectOrIncorrectIcon,\n} from '../atoms';\n\nconst ResultsBreakdown = ({ history, questions }) => {\n  return (\n    <div className=\"responses-board\" data-testid=\"responsesboard\">\n      {history.map((historyObj) => {\n        const { isCorrect, questionId, guess } = historyObj;\n        const { question, correct } = questions.find(\n          (q) => q.id === questionId,\n        );\n        return (\n          <div className=\"response\" key={questionId}>\n            <CorrectOrIncorrectIcon isCorrect={isCorrect} />\n            <ResponseQuestion isCorrect={isCorrect} question={question} />\n            <ResponseAnswer\n              guess={guess}\n              isCorrect={isCorrect}\n              correct={correct}\n            />\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nResultsBreakdown.propTypes = {\n  history: PropTypes.arrayOf(\n    PropTypes.shape({\n      questionId: PropTypes.number,\n      guess: PropTypes.string,\n      isCorrect: PropTypes.bool,\n    }),\n  ).isRequired,\n  questions: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      question: PropTypes.string,\n      incorrect: PropTypes.arrayOf(PropTypes.string),\n      answers: PropTypes.arrayOf(PropTypes.string),\n      correct: PropTypes.string,\n    }),\n  ).isRequired,\n};\n\nexport default ResultsBreakdown;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Home = () => {\n  return (\n    <div className=\"home\">\n      <h1>Welcome to the Trivia Training App!</h1>\n      <div className=\"quotation\">\n        <span className=\"quote\">“Trivia is a fact without a home.”</span>\n        <span className=\"author\">- Don Rittner</span>\n      </div>\n      <div className=\"instructions\">\n        We all love to play trivia but winning becomes elusive if you&apos;ve\n        never seen a question before! Test your skills and practice here before\n        the next team game!\n      </div>\n      <Link to=\"/play\" className=\"start-playing\">\n        Start a New Round\n      </Link>\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useContext } from 'react';\nimport { QuestionCard } from '../organisms';\nimport { RoundContext } from '../logic/RoundContext';\n\nconst Play = () => {\n  const useRound = useContext(RoundContext);\n  const { currQuestion, makeGuess, startNewRound, nextQuestion } = useRound;\n\n  useEffect(() => {\n    startNewRound();\n  }, []);\n\n  const onSubmit = (guess) => makeGuess(guess, currQuestion.id);\n\n  if (!currQuestion) return <div>Preparing deck...</div>;\n  return (\n    <QuestionCard\n      currQuestion={currQuestion}\n      onSubmit={onSubmit}\n      nextQuestion={nextQuestion}\n    />\n  );\n};\n\nPlay.propTypes = {};\n\nexport default Play;\n","import React, { useContext } from 'react';\nimport { Scoreboard } from '../atoms';\nimport { ResultsBreakdown } from '../organisms';\nimport { RoundContext } from '../logic/RoundContext';\n\nconst Results = () => {\n  const { score, questions } = useContext(RoundContext);\n\n  return (\n    <div className=\"results card\">\n      <Scoreboard score={score} />\n      <ResultsBreakdown history={score.history} questions={questions} />\n    </div>\n  );\n};\n\nResults.propTypes = {};\n\nexport default Results;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { Navbar, Main, Footer, PageContainer } from '../organisms';\nimport Home from './Home';\nimport Play from './Play';\nimport Results from './Results';\nimport RoundContextProvider from '../logic/RoundContext';\n\nfunction App() {\n  return (\n    <Router>\n      <PageContainer navBar={<Navbar />}>\n        <Main>\n          <RoundContextProvider>\n            <Switch>\n              <Route exact path=\"/play\" component={Play} />\n              <Route exact path=\"/results\" component={Results} />\n              <Route path=\"/\" component={Home} />\n            </Switch>\n          </RoundContextProvider>\n        </Main>\n        <Footer />\n      </PageContainer>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/pages/App';\nimport reportWebVitals from './reportWebVitals';\nimport './styles/style.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}